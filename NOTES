static gmx_inline real 
gmx_angle(const rvec a, const rvec b)
{
    rvec w;
    real wlen,s;
    
    cprod(a,b,w);
    
    wlen  = norm(w);
    s     = iprod(a,b);
    
    return atan2(wlen,s);
}



real dih_angle(const rvec xi,const rvec xj,const rvec xk,const rvec xl,
               const t_pbc *pbc,
               rvec r_ij,rvec r_kj,rvec r_kl,rvec m,rvec n,
               real *sign,int *t1,int *t2,int *t3)
{
  real ipr,phi;

  *t1 = pbc_rvec_sub(pbc,xi,xj,r_ij);       		/*  3 		*/
  *t2 = pbc_rvec_sub(pbc,xk,xj,r_kj);			/*  3		*/
  *t3 = pbc_rvec_sub(pbc,xk,xl,r_kl);			/*  3		*/

  cprod(r_ij,r_kj,m); 			/*  9 		*/
  cprod(r_kj,r_kl,n);			/*  9		*/
  phi=gmx_angle(m,n); 			/* 49 (assuming 25 for atan2) */
  ipr=iprod(r_ij,n); 			/*  5 		*/
  (*sign)=(ipr<0.0)?-1.0:1.0;
  phi=(*sign)*phi; 			/*  1		*/
					/* 82 TOTAL	*/
  return phi;
}

void do_dih_fup(int i,int j,int k,int l,real ddphi,
		rvec r_ij,rvec r_kj,rvec r_kl,
		rvec m,rvec n,rvec f[],rvec fshift[],
		const t_pbc *pbc,const t_graph *g,
		const rvec x[],int t1,int t2,int t3)
{
  /* 143 FLOPS */
  rvec f_i,f_j,f_k,f_l;
  rvec uvec,vvec,svec,dx_jl;
  real iprm,iprn,nrkj,nrkj2;
  real a,p,q,toler;
  ivec jt,dt_ij,dt_kj,dt_lj;  
  
  iprm  = iprod(m,m);		/*  5 	*/
  iprn  = iprod(n,n);		/*  5	*/
  nrkj2 = iprod(r_kj,r_kj);	/*  5	*/
  toler = nrkj2*GMX_REAL_EPS;
  if ((iprm > toler) && (iprn > toler)) {
    nrkj  = nrkj2*gmx_invsqrt(nrkj2);	/* 10	*/
    a     = -ddphi*nrkj/iprm;	/* 11	*/
    svmul(a,m,f_i);		/*  3	*/
    a     = ddphi*nrkj/iprn;	/* 11	*/
    svmul(a,n,f_l);		/*  3 	*/
    p     = iprod(r_ij,r_kj);	/*  5	*/
    p    /= nrkj2;		/* 10	*/
    q     = iprod(r_kl,r_kj);	/*  5	*/
    q    /= nrkj2;		/* 10	*/
    svmul(p,f_i,uvec);		/*  3	*/
    svmul(q,f_l,vvec);		/*  3	*/
    rvec_sub(uvec,vvec,svec);	/*  3	*/
    rvec_sub(f_i,svec,f_j);	/*  3	*/
    rvec_add(f_l,svec,f_k);	/*  3	*/
    rvec_inc(f[i],f_i);   	/*  3	*/
    rvec_dec(f[j],f_j);   	/*  3	*/
    rvec_dec(f[k],f_k);   	/*  3	*/
    rvec_inc(f[l],f_l);   	/*  3	*/
    
    if (g) {
      copy_ivec(SHIFT_IVEC(g,j),jt);
      ivec_sub(SHIFT_IVEC(g,i),jt,dt_ij);
      ivec_sub(SHIFT_IVEC(g,k),jt,dt_kj);
      ivec_sub(SHIFT_IVEC(g,l),jt,dt_lj);
      t1=IVEC2IS(dt_ij);
      t2=IVEC2IS(dt_kj);
      t3=IVEC2IS(dt_lj);
    } else if (pbc) {
      t3 = pbc_rvec_sub(pbc,x[l],x[j],dx_jl);
    } else {
      t3 = CENTRAL;
    }
    
    rvec_inc(fshift[t1],f_i);
    rvec_dec(fshift[CENTRAL],f_j);
    rvec_dec(fshift[t2],f_k);
    rvec_inc(fshift[t3],f_l);
  }
  /* 112 TOTAL 	*/
}

real dopdihs(real cpA,real cpB,real phiA,real phiB,int mult,
	     real phi,real lambda,real *V,real *F)
{
  real v,dvdl,mdphi,v1,sdphi,ddphi;
  real L1   = 1.0 - lambda;
  real ph0  = (L1*phiA + lambda*phiB)*DEG2RAD;
  real dph0 = (phiB - phiA)*DEG2RAD;
  real cp   = L1*cpA + lambda*cpB;
  
  mdphi =  mult*phi - ph0;
  sdphi = sin(mdphi);
  ddphi = -cp*mult*sdphi;
  v1    = 1.0 + cos(mdphi);
  v     = cp*v1;
  
  dvdl  = (cpB - cpA)*v1 + cp*dph0*sdphi;
  
  *V = v;
  *F = ddphi;
  
  return dvdl;
  
  /* That was 40 flops */
}

static real dopdihs_min(real cpA,real cpB,real phiA,real phiB,int mult,
			real phi,real lambda,real *V,real *F)
     /* similar to dopdihs, except for a minus sign  *
      * and a different treatment of mult/phi0       */
{
  real v,dvdl,mdphi,v1,sdphi,ddphi;
  real L1   = 1.0 - lambda;
  real ph0  = (L1*phiA + lambda*phiB)*DEG2RAD;
  real dph0 = (phiB - phiA)*DEG2RAD;
  real cp   = L1*cpA + lambda*cpB;
  
  mdphi = mult*(phi-ph0);
  sdphi = sin(mdphi);
  ddphi = cp*mult*sdphi;
  v1    = 1.0-cos(mdphi);
  v     = cp*v1;
  
  dvdl  = (cpB-cpA)*v1 + cp*dph0*sdphi;
  
  *V = v;
  *F = ddphi;
  
  return dvdl;
  
  /* That was 40 flops */
}

real pdihs(int nbonds,
	   const t_iatom forceatoms[],const t_iparams forceparams[],
	   const rvec x[],rvec f[],rvec fshift[],
	   const t_pbc *pbc,const t_graph *g,
	   real lambda,real *dvdlambda,
	   const t_mdatoms *md,t_fcdata *fcd,
	   int *global_atom_index)
{
  int  i,type,ai,aj,ak,al;
  int  t1,t2,t3;
  rvec r_ij,r_kj,r_kl,m,n;
  real phi,sign,ddphi,vpd,vtot;

  vtot = 0.0;

  for(i=0; (i<nbonds); ) {
    type = forceatoms[i++];
    ai   = forceatoms[i++];
    aj   = forceatoms[i++];
    ak   = forceatoms[i++];
    al   = forceatoms[i++];
    
    phi=dih_angle(x[ai],x[aj],x[ak],x[al],pbc,r_ij,r_kj,r_kl,m,n,
                  &sign,&t1,&t2,&t3);			/*  84 		*/

    *dvdlambda += dopdihs(forceparams[type].pdihs.cpA,
			  forceparams[type].pdihs.cpB,
			  forceparams[type].pdihs.phiA,
			  forceparams[type].pdihs.phiB,
			  forceparams[type].pdihs.mult,
			  phi,lambda,&vpd,&ddphi);

    vtot += vpd;
    do_dih_fup(ai,aj,ak,al,ddphi,r_ij,r_kj,r_kl,m,n,
	       f,fshift,pbc,g,x,t1,t2,t3);			/* 112		*/

#ifdef DEBUG
    fprintf(debug,"pdih: (%d,%d,%d,%d) phi=%g\n",
	    ai,aj,ak,al,phi);
#endif
  } /* 223 TOTAL 	*/

  return vtot;
}


real idihs(int nbonds,
	   const t_iatom forceatoms[],const t_iparams forceparams[],
	   const rvec x[],rvec f[],rvec fshift[],
	   const t_pbc *pbc,const t_graph *g,
	   real lambda,real *dvdlambda,
	   const t_mdatoms *md,t_fcdata *fcd,
	   int *global_atom_index)
{
  int  i,type,ai,aj,ak,al;
  int  t1,t2,t3;
  real phi,phi0,dphi0,ddphi,sign,vtot;
  rvec r_ij,r_kj,r_kl,m,n;
  real L1,kk,dp,dp2,kA,kB,pA,pB,dvdl;

  L1 = 1.0-lambda;
  dvdl = 0;

  vtot = 0.0;
  for(i=0; (i<nbonds); ) {
    type = forceatoms[i++];
    ai   = forceatoms[i++];
    aj   = forceatoms[i++];
    ak   = forceatoms[i++];
    al   = forceatoms[i++];
    
    phi=dih_angle(x[ai],x[aj],x[ak],x[al],pbc,r_ij,r_kj,r_kl,m,n,
                  &sign,&t1,&t2,&t3);			/*  84		*/
    
    /* phi can jump if phi0 is close to Pi/-Pi, which will cause huge
     * force changes if we just apply a normal harmonic.
     * Instead, we first calculate phi-phi0 and take it modulo (-Pi,Pi).
     * This means we will never have the periodicity problem, unless
     * the dihedral is Pi away from phiO, which is very unlikely due to
     * the potential.
     */
    kA = forceparams[type].harmonic.krA;
    kB = forceparams[type].harmonic.krB;
    pA = forceparams[type].harmonic.rA;
    pB = forceparams[type].harmonic.rB;

    kk    = L1*kA + lambda*kB;
    phi0  = (L1*pA + lambda*pB)*DEG2RAD;
    dphi0 = (pB - pA)*DEG2RAD;

    /* dp = (phi-phi0), modulo (-pi,pi) */
    dp = phi-phi0;  
    /* dp cannot be outside (-2*pi,2*pi) */
    if (dp >= M_PI)
      dp -= 2*M_PI;
    else if(dp < -M_PI)
      dp += 2*M_PI;
    
    dp2 = dp*dp;

    vtot += 0.5*kk*dp2;
    ddphi = -kk*dp;
    
    dvdl += 0.5*(kB - kA)*dp2 - kk*dphi0*dp;

    do_dih_fup(ai,aj,ak,al,(real)(-ddphi),r_ij,r_kj,r_kl,m,n,
	       f,fshift,pbc,g,x,t1,t2,t3);			/* 112		*/
    /* 217 TOTAL	*/
#ifdef DEBUG
    if (debug)
      fprintf(debug,"idih: (%d,%d,%d,%d) phi=%g\n",
	      ai,aj,ak,al,phi);
#endif
  }
  
  *dvdlambda += dvdl;
  return vtot;
}


